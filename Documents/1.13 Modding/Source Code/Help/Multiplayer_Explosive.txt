Explosives
==========

Objectives

Sync all explosives in MP:
 - thrown grenades
 - underslung grenades
 - mortars
 - rockets
 - placed explosives
 - exploding gas tanks


- have to sync placement of explosives

- sync detonation

- sync effects and destruction


Current workings of the Explosives system
=========================================

Placeing an explosive and setting the timer
1. Handle Items.cpp - StartBombMessageBox()
2. Handle Items.cpp - BombMessageCallback()
3. World Items.cpp - AddBombToWorld()

Detonation / triggering for timed bombs
1. Explosion Control.cpp - DecayBombTimers()
 - Sets the person who exploded the bomb to a global flag (for reaction?)
2. Explosion Control.cpp - AddBombToQueue()
 - Locks UI
 - Adds bomb to about to explode queue
3. Explosion Control.cpp - HandleExplosionQueue()
 - removes bomb from world
 - activates action item / klaxon / flare (if not bomb)
 - otherwise starts explosion
 - does not remove bomb from explosion queue but does set .exists to false which stops it from going off again
 - also checks if there are no more explosions in the queue and ulocks UI etc
4. Explosion Control.cpp - IgniteExplosion()
 - wrapper
5. Explosion Control.cpp - InternalIgniteExplosion()
 - sets Explosion Parameters struct and calls GenerateExplosion
6. Explosion Control.cpp - GenerateExplosion()
 - gets a free Explosion index from gExplosionData
 - inits a new explosion structure and copies parameters into it, its in the array gExplosionData
7. Explosion Control.cpp - GenerateExplosionFromExplosionPointer()
 - Creates the relevant animations which are then handled by the tile animation system
 - plays sounds

Effects and Destruction
 Explosion Control.cpp - UpdateExplosionFrame()
   - called by tile engine, updates explosion animation frames 
 Explosion Control.cpp - RemoveExplosionData()
   - called by tile enginge when animation finishes
   - removes explosion from the system
 tile animation.cpp - UpdateAniTiles()
   - calls spreadeffect
 Explosion Control.cpp - SpreadEffect()
  - spreads the effect of tear gas / smoke etc
  - calls ExpAffect to calculate physical effects on the world such as damage
 Explosion Control.cpp - ExpAffect()
  - this calculates damage based on size, type of explosive and distance from centre
  - calls ExplosiveDamageGridNo() to damage buildings
  - drops blood or char marks etc
  - starts smoke / gas effects in adjacent sectors
  - calls DamageSoldierFromBlast() to damage soldiers
 Explosion Control.cpp - ExplosiveDamageGridNo()
  - loops through structues in the world, also ignites secondary explosions from the destruction of exploadable objects
 Explosion Control.cpp - ExplosiveDamageStructureAtGridNo()
  - actually removes the object
  - replaces it with appropriate debris etc



Grenades
--------
Weapons.cpp - UseLauncher() - calls CreatePhysicalObject()
Weapons.cpp - UseThrown() - sets up CreatePhysicalObject() to be called in line 1018, Soldier Ani.cpp (AdjustToNextAnimationFrame())

Grenades work by creating a physics object for the thrown or launched grenade
When these collide, they explode, in Physics.cpp - HandleArmedObjectImpact()
 - this sets off an IgniteExplosion() and things continue as they would a bomb

Damage and Effects
Tile animation system passes into Explosion Control - SpreadEffects


---------------------------------------------------------------------------------
Recommendations

To get the grenades and mortars showing on the other clients, have a sync routine when we call CreatePhysicalObject for these (outside of it though)

For bombs we need to have a sync function when they are added to the world in AddBombToWorld()

We only call IgniteExplosion if we are the client who created the explosion, or it was ai and we the server

We have a sync function for starting foreign explosions

Eeither have to sync every client visual and damage effect by syncing all :
Sync all ExplosiveDamageGridNo() , DamageItemOnGround() , RemoveSmokeEffectFromTile() , AddSmokeEffectToTile() , InternalDropBlood() , DamageSoldierFromBlast() , DamageSoldierFromBlast()

or write an MPClientExpAffect function that takes the random damage generated from the originating client. Need to check how periodic effects such as gas clouds affect this.


==================================================================================
IMPLEMENTATION DETAILS
==================================================================================

The following specifies all the places where syncronisation occurs, who sends what and why.

Explosives / Bombs
==================
Added fields to WORLDBOMB so we can identify if it came from a remote client, and what its remote identifier was

Planting
--------
Originating Client
	- creates a local world item (physical item on the ground)
	- creats a local WORLDBOMB (handles timed and remote detonators)
	- calls sendPLANTEXPLOSIVE
Other Clients
	- get receivePLANTEXPLOSIVE()
		- creates a local world item
		- creates a local WORLDBOMB and links it to the originating clients WORLDBOMB
		
Detonating
----------
Originating Client
	- Calls AddBombToWorld()
		- removes world item
		- removes WORLDBOMB
		- adds an explosion to the world
	- Calls sendDETONATEEXPLOSIVE() to tell clients to explode the WORLDBOMB
Other Clients
	- gets recieveDETONATEEXPLOSIVE()
		- finds matching local WORLDBOMB and calls local AddBombToWorld()
		
Exploding
---------		
  Originating client
	- calls SpreadEffect (only once) which then calls sendSPREADEFFECT() - to update the remote clients and random number status
  Other clients
	- gets receiveSPREADEFFECT() - syncronises random number generator with originating client and calls local SpreadEffect()
	
  When the random number generators are aligned at the start of a SpreadEffect call, it is deterministic enough to relably sync:
	- all damage to buildings
	- all damage to items on the ground (which might then also explode causing seperate calls to SpreadEffect())
	- all debris and blood placement
	- all player damage (but this doesnt take into account armor because inventory net yet synced, so its synced seperately)

NOTE : Unfortunately it doesnt work as well when smoke effects are active, something to do with the timing. Also why damage to soldiers is sync'd seperately.

Grenades / Thrown weapons
=========================
Added fields to REAL_OBJECT so we can identify if it came from a remote client, and what its remote identifier was
Added fields to SMOKEEFFECT for the same reason

Throwing
--------
Originating Client
	- creates a local grenade
	- calls send_grenade()
Other Clients
	- get receiveGRENADE() and add a matching object to the world, linking its ID with senders client

Detonating
----------
Originating Client
	- Explodes local grenade if it wasnt a dud
	- calls send_grenade_result() - letting other clients know if the grenade was a dud or not. Also explodes it locally.
Other clients
	- get recieveGRENADERESULT() - if it explodes, they look up the local grenade which matches the id from the sender and explodes it.

Exploding
---------
If grenade type was Smoke or Gas:
  Originating client 
	- calls NewSmokeEffect() which then calls send_newsmokeeffect() - letting all other clients know to create a new smoke effect
	- does first SpreadEffect() - but doesnt send this one to the clients
	- each subsequent turn it calls SpreadEffect() and sendSPREADEFFECT() - to update the remote clients on the spread of the smoke cloud and random number status
  Other clients
	- get receiveNEWSMOKEEFFECT() - they set up a new smoke effect, and link it to the remote one, does the first spreadeffect locally
	- each subsequent turn gets receiveSPREADEFFECT() - syncronises random number generator with originating client and calls local SpreadEffect()

If a Normal exploding or stun grenade:
  Originating client
	- calls SpreadEffect (only once) which then calls sendSPREADEFFECT() - to update the remote clients and random number status
  Other clients
	- gets receiveSPREADEFFECT() - syncronises random number generator with originating client and calls local SpreadEffect()
	
Damage
------

DamageSoldierFromBlast() and DishOutGasDamage() have been syncronised, they now only run if you are the client responsible for that Soldier/Merc, ie it is yours, or it is AI and you are the server.
If so, it calls sendEXPLOSIONDAMAGE() to other clients.
Note this is slightly different from the rest of the way everything is synced, because everything else the attacker sends, but in this case it is the reciever sending it. This is to take into account
explosive resistant armor and gas masks.

=================================================================================
Completed features
=================================================================================
All types of grenades
Thrown items, missed items fall to world
All types Mortars
Remote and Timed Explosives (have not tested pressure switch but in theory should work)
Disarming of Explosives placed in world

Todo
-----

Disarm bomb
	- Detonate bomb correctly on a failed disarm 
	- give triggers to player, instead of just bomb as they cant use it then
